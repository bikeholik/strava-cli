plugins {
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'org.jetbrains.kotlin.jvm' version '1.3.20'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.3.20'
	id "com.github.node-gradle.node" version "1.3.0"
	id "idea"
}

apply plugin: 'io.spring.dependency-management'

group = 'com.github.bikeholik'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jetty'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
	implementation 'com.github.ajalt:clikt:1.6.0'
	compile 'io.swagger:swagger-annotations:1.5.15'
	compile 'com.squareup.okhttp:okhttp:2.7.5'
	compile 'com.squareup.okhttp:logging-interceptor:2.7.5'
	compile 'com.google.code.gson:gson:2.8.1'
	compile 'io.gsonfire:gson-fire:1.8.0'
	compile 'org.threeten:threetenbp:1.3.5'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
}

configurations {
	compile.exclude module: "spring-boot-starter-tomcat"
}

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

if (project.hasProperty("prod")) {
	apply from: "gradle/profile_prod.gradle"
} else {
	apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("nodeInstall")) {
	node {
		version = "${node_version}"
		npmVersion = "${npm_version}"
		yarnVersion = "${yarn_version}"
		download = true
	}
}

idea {
	module {
		excludeDirs += files("node_modules")
		resourceDirs += files("build/resources/main")
	}
}
