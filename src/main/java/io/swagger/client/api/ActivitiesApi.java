/*
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ActivityZone;
import io.swagger.client.model.Comment;
import io.swagger.client.model.DetailedActivity;
import io.swagger.client.model.Fault;
import io.swagger.client.model.Lap;
import io.swagger.client.model.SummaryActivity;
import io.swagger.client.model.SummaryAthlete;
import io.swagger.client.model.UpdatableActivity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActivitiesApi {
    private ApiClient apiClient;

    public ActivitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActivitiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createActivity
     * @param name The name of the activity. (required)
     * @param type Type of activity. For example - Run, Ride etc. (required)
     * @param startDateLocal ISO 8601 formatted date time. (required)
     * @param elapsedTime In seconds. (required)
     * @param description Description of the activity. (optional)
     * @param distance In meters. (optional)
     * @param trainer Set to 1 to mark as a trainer activity. (optional)
     * @param photoIds List of native photo ids to attach to the activity. (optional)
     * @param commute Set to 1 to mark as commute. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createActivityCall(String name, String type, String startDateLocal, Integer elapsedTime, String description, Float distance, Integer trainer, String photoIds, Integer commute, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/activities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);
        if (type != null)
        localVarFormParams.put("type", type);
        if (startDateLocal != null)
        localVarFormParams.put("start_date_local", startDateLocal);
        if (elapsedTime != null)
        localVarFormParams.put("elapsed_time", elapsedTime);
        if (description != null)
        localVarFormParams.put("description", description);
        if (distance != null)
        localVarFormParams.put("distance", distance);
        if (trainer != null)
        localVarFormParams.put("trainer", trainer);
        if (photoIds != null)
        localVarFormParams.put("photo_ids", photoIds);
        if (commute != null)
        localVarFormParams.put("commute", commute);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createActivityValidateBeforeCall(String name, String type, String startDateLocal, Integer elapsedTime, String description, Float distance, Integer trainer, String photoIds, Integer commute, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createActivity(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createActivity(Async)");
        }
        
        // verify the required parameter 'startDateLocal' is set
        if (startDateLocal == null) {
            throw new ApiException("Missing the required parameter 'startDateLocal' when calling createActivity(Async)");
        }
        
        // verify the required parameter 'elapsedTime' is set
        if (elapsedTime == null) {
            throw new ApiException("Missing the required parameter 'elapsedTime' when calling createActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = createActivityCall(name, type, startDateLocal, elapsedTime, description, distance, trainer, photoIds, commute, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an Activity
     * Creates a manual activity for an athlete, requires activity:write scope.
     * @param name The name of the activity. (required)
     * @param type Type of activity. For example - Run, Ride etc. (required)
     * @param startDateLocal ISO 8601 formatted date time. (required)
     * @param elapsedTime In seconds. (required)
     * @param description Description of the activity. (optional)
     * @param distance In meters. (optional)
     * @param trainer Set to 1 to mark as a trainer activity. (optional)
     * @param photoIds List of native photo ids to attach to the activity. (optional)
     * @param commute Set to 1 to mark as commute. (optional)
     * @return DetailedActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DetailedActivity createActivity(String name, String type, String startDateLocal, Integer elapsedTime, String description, Float distance, Integer trainer, String photoIds, Integer commute) throws ApiException {
        ApiResponse<DetailedActivity> resp = createActivityWithHttpInfo(name, type, startDateLocal, elapsedTime, description, distance, trainer, photoIds, commute);
        return resp.getData();
    }

    /**
     * Create an Activity
     * Creates a manual activity for an athlete, requires activity:write scope.
     * @param name The name of the activity. (required)
     * @param type Type of activity. For example - Run, Ride etc. (required)
     * @param startDateLocal ISO 8601 formatted date time. (required)
     * @param elapsedTime In seconds. (required)
     * @param description Description of the activity. (optional)
     * @param distance In meters. (optional)
     * @param trainer Set to 1 to mark as a trainer activity. (optional)
     * @param photoIds List of native photo ids to attach to the activity. (optional)
     * @param commute Set to 1 to mark as commute. (optional)
     * @return ApiResponse&lt;DetailedActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DetailedActivity> createActivityWithHttpInfo(String name, String type, String startDateLocal, Integer elapsedTime, String description, Float distance, Integer trainer, String photoIds, Integer commute) throws ApiException {
        com.squareup.okhttp.Call call = createActivityValidateBeforeCall(name, type, startDateLocal, elapsedTime, description, distance, trainer, photoIds, commute, null, null);
        Type localVarReturnType = new TypeToken<DetailedActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an Activity (asynchronously)
     * Creates a manual activity for an athlete, requires activity:write scope.
     * @param name The name of the activity. (required)
     * @param type Type of activity. For example - Run, Ride etc. (required)
     * @param startDateLocal ISO 8601 formatted date time. (required)
     * @param elapsedTime In seconds. (required)
     * @param description Description of the activity. (optional)
     * @param distance In meters. (optional)
     * @param trainer Set to 1 to mark as a trainer activity. (optional)
     * @param photoIds List of native photo ids to attach to the activity. (optional)
     * @param commute Set to 1 to mark as commute. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createActivityAsync(String name, String type, String startDateLocal, Integer elapsedTime, String description, Float distance, Integer trainer, String photoIds, Integer commute, final ApiCallback<DetailedActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createActivityValidateBeforeCall(name, type, startDateLocal, elapsedTime, description, distance, trainer, photoIds, commute, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DetailedActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getActivityById
     * @param id The identifier of the activity. (required)
     * @param includeAllEfforts To include all segments efforts. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActivityByIdCall(Long id, Boolean includeAllEfforts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/activities/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeAllEfforts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_all_efforts", includeAllEfforts));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActivityByIdValidateBeforeCall(Long id, Boolean includeAllEfforts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getActivityByIdCall(id, includeAllEfforts, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Activity
     * Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @param includeAllEfforts To include all segments efforts. (optional)
     * @return DetailedActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DetailedActivity getActivityById(Long id, Boolean includeAllEfforts) throws ApiException {
        ApiResponse<DetailedActivity> resp = getActivityByIdWithHttpInfo(id, includeAllEfforts);
        return resp.getData();
    }

    /**
     * Get Activity
     * Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @param includeAllEfforts To include all segments efforts. (optional)
     * @return ApiResponse&lt;DetailedActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DetailedActivity> getActivityByIdWithHttpInfo(Long id, Boolean includeAllEfforts) throws ApiException {
        com.squareup.okhttp.Call call = getActivityByIdValidateBeforeCall(id, includeAllEfforts, null, null);
        Type localVarReturnType = new TypeToken<DetailedActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Activity (asynchronously)
     * Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @param includeAllEfforts To include all segments efforts. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActivityByIdAsync(Long id, Boolean includeAllEfforts, final ApiCallback<DetailedActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActivityByIdValidateBeforeCall(id, includeAllEfforts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DetailedActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCommentsByActivityId
     * @param id The identifier of the activity. (required)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommentsByActivityIdCall(Long id, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/activities/{id}/comments"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommentsByActivityIdValidateBeforeCall(Long id, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCommentsByActivityId(Async)");
        }
        

        com.squareup.okhttp.Call call = getCommentsByActivityIdCall(id, page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Activity Comments
     * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @return List&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Comment> getCommentsByActivityId(Long id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<Comment>> resp = getCommentsByActivityIdWithHttpInfo(id, page, perPage);
        return resp.getData();
    }

    /**
     * List Activity Comments
     * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Comment>> getCommentsByActivityIdWithHttpInfo(Long id, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = getCommentsByActivityIdValidateBeforeCall(id, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Activity Comments (asynchronously)
     * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommentsByActivityIdAsync(Long id, Integer page, Integer perPage, final ApiCallback<List<Comment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommentsByActivityIdValidateBeforeCall(id, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKudoersByActivityId
     * @param id The identifier of the activity. (required)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKudoersByActivityIdCall(Integer id, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/activities/{id}/kudos"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKudoersByActivityIdValidateBeforeCall(Integer id, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getKudoersByActivityId(Async)");
        }
        

        com.squareup.okhttp.Call call = getKudoersByActivityIdCall(id, page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Activity Kudoers
     * Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @return List&lt;SummaryAthlete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SummaryAthlete> getKudoersByActivityId(Integer id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<SummaryAthlete>> resp = getKudoersByActivityIdWithHttpInfo(id, page, perPage);
        return resp.getData();
    }

    /**
     * List Activity Kudoers
     * Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @return ApiResponse&lt;List&lt;SummaryAthlete&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SummaryAthlete>> getKudoersByActivityIdWithHttpInfo(Integer id, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = getKudoersByActivityIdValidateBeforeCall(id, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<List<SummaryAthlete>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Activity Kudoers (asynchronously)
     * Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKudoersByActivityIdAsync(Integer id, Integer page, Integer perPage, final ApiCallback<List<SummaryAthlete>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKudoersByActivityIdValidateBeforeCall(id, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SummaryAthlete>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLapsByActivityId
     * @param id The identifier of the activity. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLapsByActivityIdCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/activities/{id}/laps"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLapsByActivityIdValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLapsByActivityId(Async)");
        }
        

        com.squareup.okhttp.Call call = getLapsByActivityIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Activity Laps
     * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @return List&lt;Lap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Lap> getLapsByActivityId(Long id) throws ApiException {
        ApiResponse<List<Lap>> resp = getLapsByActivityIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * List Activity Laps
     * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @return ApiResponse&lt;List&lt;Lap&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Lap>> getLapsByActivityIdWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getLapsByActivityIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<List<Lap>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Activity Laps (asynchronously)
     * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLapsByActivityIdAsync(Long id, final ApiCallback<List<Lap>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLapsByActivityIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Lap>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoggedInAthleteActivities
     * @param before An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)
     * @param after An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoggedInAthleteActivitiesCall(Integer before, Integer after, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/athlete/activities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (after != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoggedInAthleteActivitiesValidateBeforeCall(Integer before, Integer after, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getLoggedInAthleteActivitiesCall(before, after, page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Athlete Activities
     * Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
     * @param before An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)
     * @param after An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @return List&lt;SummaryActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SummaryActivity> getLoggedInAthleteActivities(Integer before, Integer after, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<SummaryActivity>> resp = getLoggedInAthleteActivitiesWithHttpInfo(before, after, page, perPage);
        return resp.getData();
    }

    /**
     * List Athlete Activities
     * Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
     * @param before An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)
     * @param after An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @return ApiResponse&lt;List&lt;SummaryActivity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SummaryActivity>> getLoggedInAthleteActivitiesWithHttpInfo(Integer before, Integer after, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = getLoggedInAthleteActivitiesValidateBeforeCall(before, after, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<List<SummaryActivity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Athlete Activities (asynchronously)
     * Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
     * @param before An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)
     * @param after An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoggedInAthleteActivitiesAsync(Integer before, Integer after, Integer page, Integer perPage, final ApiCallback<List<SummaryActivity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoggedInAthleteActivitiesValidateBeforeCall(before, after, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SummaryActivity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getZonesByActivityId
     * @param id The identifier of the activity. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getZonesByActivityIdCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/activities/{id}/zones"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getZonesByActivityIdValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getZonesByActivityId(Async)");
        }
        

        com.squareup.okhttp.Call call = getZonesByActivityIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Activity Zones
     * Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @return List&lt;ActivityZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ActivityZone> getZonesByActivityId(Integer id) throws ApiException {
        ApiResponse<List<ActivityZone>> resp = getZonesByActivityIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Activity Zones
     * Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @return ApiResponse&lt;List&lt;ActivityZone&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ActivityZone>> getZonesByActivityIdWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getZonesByActivityIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<List<ActivityZone>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Activity Zones (asynchronously)
     * Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getZonesByActivityIdAsync(Integer id, final ApiCallback<List<ActivityZone>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getZonesByActivityIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ActivityZone>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateActivityById
     * @param id The identifier of the activity. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateActivityByIdCall(Long id, UpdatableActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/activities/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateActivityByIdValidateBeforeCall(Long id, UpdatableActivity body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateActivityById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateActivityByIdCall(id, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Activity
     * Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
     * @param id The identifier of the activity. (required)
     * @param body  (optional)
     * @return DetailedActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DetailedActivity updateActivityById(Long id, UpdatableActivity body) throws ApiException {
        ApiResponse<DetailedActivity> resp = updateActivityByIdWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * Update Activity
     * Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
     * @param id The identifier of the activity. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;DetailedActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DetailedActivity> updateActivityByIdWithHttpInfo(Long id, UpdatableActivity body) throws ApiException {
        com.squareup.okhttp.Call call = updateActivityByIdValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<DetailedActivity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Activity (asynchronously)
     * Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
     * @param id The identifier of the activity. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateActivityByIdAsync(Long id, UpdatableActivity body, final ApiCallback<DetailedActivity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateActivityByIdValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DetailedActivity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
