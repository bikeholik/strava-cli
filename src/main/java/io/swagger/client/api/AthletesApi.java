/*
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ActivityStats;
import io.swagger.client.model.DetailedAthlete;
import io.swagger.client.model.Fault;
import io.swagger.client.model.Zones;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AthletesApi {
    private ApiClient apiClient;

    public AthletesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AthletesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getLoggedInAthlete
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoggedInAthleteCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/athlete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoggedInAthleteValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getLoggedInAthleteCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Authenticated Athlete
     * Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
     * @return DetailedAthlete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DetailedAthlete getLoggedInAthlete() throws ApiException {
        ApiResponse<DetailedAthlete> resp = getLoggedInAthleteWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Authenticated Athlete
     * Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
     * @return ApiResponse&lt;DetailedAthlete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DetailedAthlete> getLoggedInAthleteWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getLoggedInAthleteValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<DetailedAthlete>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Authenticated Athlete (asynchronously)
     * Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoggedInAthleteAsync(final ApiCallback<DetailedAthlete> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoggedInAthleteValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DetailedAthlete>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoggedInAthleteZones
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoggedInAthleteZonesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/athlete/zones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoggedInAthleteZonesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getLoggedInAthleteZonesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Zones
     * Returns the the authenticated athlete&#39;s heart rate and power zones. Requires profile:read_all.
     * @return Zones
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Zones getLoggedInAthleteZones() throws ApiException {
        ApiResponse<Zones> resp = getLoggedInAthleteZonesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Zones
     * Returns the the authenticated athlete&#39;s heart rate and power zones. Requires profile:read_all.
     * @return ApiResponse&lt;Zones&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Zones> getLoggedInAthleteZonesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getLoggedInAthleteZonesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Zones>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Zones (asynchronously)
     * Returns the the authenticated athlete&#39;s heart rate and power zones. Requires profile:read_all.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoggedInAthleteZonesAsync(final ApiCallback<Zones> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoggedInAthleteZonesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Zones>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStats
     * @param id The identifier of the athlete. Must match the authenticated athlete. (required)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatsCall(Integer id, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/athletes/{id}/stats"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatsValidateBeforeCall(Integer id, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStats(Async)");
        }
        

        com.squareup.okhttp.Call call = getStatsCall(id, page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Athlete Stats
     * Returns the activity stats of an athlete.
     * @param id The identifier of the athlete. Must match the authenticated athlete. (required)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @return ActivityStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActivityStats getStats(Integer id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<ActivityStats> resp = getStatsWithHttpInfo(id, page, perPage);
        return resp.getData();
    }

    /**
     * Get Athlete Stats
     * Returns the activity stats of an athlete.
     * @param id The identifier of the athlete. Must match the authenticated athlete. (required)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @return ApiResponse&lt;ActivityStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActivityStats> getStatsWithHttpInfo(Integer id, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = getStatsValidateBeforeCall(id, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<ActivityStats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Athlete Stats (asynchronously)
     * Returns the activity stats of an athlete.
     * @param id The identifier of the athlete. Must match the authenticated athlete. (required)
     * @param page Page number. (optional)
     * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatsAsync(Integer id, Integer page, Integer perPage, final ApiCallback<ActivityStats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatsValidateBeforeCall(id, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActivityStats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLoggedInAthlete
     * @param weight The weight of the athlete in kilograms. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoggedInAthleteCall(Float weight, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/athlete"
            .replaceAll("\\{" + "weight" + "\\}", apiClient.escapeString(weight.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoggedInAthleteValidateBeforeCall(Float weight, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'weight' is set
        if (weight == null) {
            throw new ApiException("Missing the required parameter 'weight' when calling updateLoggedInAthlete(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLoggedInAthleteCall(weight, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Athlete
     * Update the currently authenticated athlete. Requires profile:write scope.
     * @param weight The weight of the athlete in kilograms. (required)
     * @return DetailedAthlete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DetailedAthlete updateLoggedInAthlete(Float weight) throws ApiException {
        ApiResponse<DetailedAthlete> resp = updateLoggedInAthleteWithHttpInfo(weight);
        return resp.getData();
    }

    /**
     * Update Athlete
     * Update the currently authenticated athlete. Requires profile:write scope.
     * @param weight The weight of the athlete in kilograms. (required)
     * @return ApiResponse&lt;DetailedAthlete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DetailedAthlete> updateLoggedInAthleteWithHttpInfo(Float weight) throws ApiException {
        com.squareup.okhttp.Call call = updateLoggedInAthleteValidateBeforeCall(weight, null, null);
        Type localVarReturnType = new TypeToken<DetailedAthlete>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Athlete (asynchronously)
     * Update the currently authenticated athlete. Requires profile:write scope.
     * @param weight The weight of the athlete in kilograms. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoggedInAthleteAsync(Float weight, final ApiCallback<DetailedAthlete> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoggedInAthleteValidateBeforeCall(weight, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DetailedAthlete>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
