/*
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Fault;
import io.swagger.client.model.StreamSet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamsApi {
    private ApiClient apiClient;

    public StreamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getActivityStreams
     * @param id The identifier of the activity. (required)
     * @param keys Desired stream types. (required)
     * @param keyByType Must be true. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActivityStreamsCall(Long id, List<String> keys, Boolean keyByType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/activities/{id}/streams"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keys != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "keys", keys));
        if (keyByType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key_by_type", keyByType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActivityStreamsValidateBeforeCall(Long id, List<String> keys, Boolean keyByType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getActivityStreams(Async)");
        }
        
        // verify the required parameter 'keys' is set
        if (keys == null) {
            throw new ApiException("Missing the required parameter 'keys' when calling getActivityStreams(Async)");
        }
        
        // verify the required parameter 'keyByType' is set
        if (keyByType == null) {
            throw new ApiException("Missing the required parameter 'keyByType' when calling getActivityStreams(Async)");
        }
        

        com.squareup.okhttp.Call call = getActivityStreamsCall(id, keys, keyByType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Activity Streams
     * Returns the given activity&#39;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @param keys Desired stream types. (required)
     * @param keyByType Must be true. (required)
     * @return StreamSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamSet getActivityStreams(Long id, List<String> keys, Boolean keyByType) throws ApiException {
        ApiResponse<StreamSet> resp = getActivityStreamsWithHttpInfo(id, keys, keyByType);
        return resp.getData();
    }

    /**
     * Get Activity Streams
     * Returns the given activity&#39;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @param keys Desired stream types. (required)
     * @param keyByType Must be true. (required)
     * @return ApiResponse&lt;StreamSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamSet> getActivityStreamsWithHttpInfo(Long id, List<String> keys, Boolean keyByType) throws ApiException {
        com.squareup.okhttp.Call call = getActivityStreamsValidateBeforeCall(id, keys, keyByType, null, null);
        Type localVarReturnType = new TypeToken<StreamSet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Activity Streams (asynchronously)
     * Returns the given activity&#39;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
     * @param id The identifier of the activity. (required)
     * @param keys Desired stream types. (required)
     * @param keyByType Must be true. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActivityStreamsAsync(Long id, List<String> keys, Boolean keyByType, final ApiCallback<StreamSet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActivityStreamsValidateBeforeCall(id, keys, keyByType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamSet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRouteStreams
     * @param id The identifier of the route. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRouteStreamsCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/routes/{id}/streams"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRouteStreamsValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRouteStreams(Async)");
        }
        

        com.squareup.okhttp.Call call = getRouteStreamsCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Route Streams
     * Returns the given route&#39;s streams. Requires read_all scope for private routes.
     * @param id The identifier of the route. (required)
     * @return StreamSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamSet getRouteStreams(Long id) throws ApiException {
        ApiResponse<StreamSet> resp = getRouteStreamsWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Route Streams
     * Returns the given route&#39;s streams. Requires read_all scope for private routes.
     * @param id The identifier of the route. (required)
     * @return ApiResponse&lt;StreamSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamSet> getRouteStreamsWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getRouteStreamsValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<StreamSet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Route Streams (asynchronously)
     * Returns the given route&#39;s streams. Requires read_all scope for private routes.
     * @param id The identifier of the route. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRouteStreamsAsync(Long id, final ApiCallback<StreamSet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRouteStreamsValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamSet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSegmentEffortStreams
     * @param id The identifier of the segment effort. (required)
     * @param keys The types of streams to return. (required)
     * @param keyByType Must be true. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSegmentEffortStreamsCall(Long id, List<String> keys, Boolean keyByType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/segment_efforts/{id}/streams"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keys != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "keys", keys));
        if (keyByType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key_by_type", keyByType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSegmentEffortStreamsValidateBeforeCall(Long id, List<String> keys, Boolean keyByType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSegmentEffortStreams(Async)");
        }
        
        // verify the required parameter 'keys' is set
        if (keys == null) {
            throw new ApiException("Missing the required parameter 'keys' when calling getSegmentEffortStreams(Async)");
        }
        
        // verify the required parameter 'keyByType' is set
        if (keyByType == null) {
            throw new ApiException("Missing the required parameter 'keyByType' when calling getSegmentEffortStreams(Async)");
        }
        

        com.squareup.okhttp.Call call = getSegmentEffortStreamsCall(id, keys, keyByType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Segment Effort Streams
     * Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
     * @param id The identifier of the segment effort. (required)
     * @param keys The types of streams to return. (required)
     * @param keyByType Must be true. (required)
     * @return StreamSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamSet getSegmentEffortStreams(Long id, List<String> keys, Boolean keyByType) throws ApiException {
        ApiResponse<StreamSet> resp = getSegmentEffortStreamsWithHttpInfo(id, keys, keyByType);
        return resp.getData();
    }

    /**
     * Get Segment Effort Streams
     * Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
     * @param id The identifier of the segment effort. (required)
     * @param keys The types of streams to return. (required)
     * @param keyByType Must be true. (required)
     * @return ApiResponse&lt;StreamSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamSet> getSegmentEffortStreamsWithHttpInfo(Long id, List<String> keys, Boolean keyByType) throws ApiException {
        com.squareup.okhttp.Call call = getSegmentEffortStreamsValidateBeforeCall(id, keys, keyByType, null, null);
        Type localVarReturnType = new TypeToken<StreamSet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Segment Effort Streams (asynchronously)
     * Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
     * @param id The identifier of the segment effort. (required)
     * @param keys The types of streams to return. (required)
     * @param keyByType Must be true. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSegmentEffortStreamsAsync(Long id, List<String> keys, Boolean keyByType, final ApiCallback<StreamSet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSegmentEffortStreamsValidateBeforeCall(id, keys, keyByType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamSet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSegmentStreams
     * @param id The identifier of the segment. (required)
     * @param keys The types of streams to return. (required)
     * @param keyByType Must be true. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSegmentStreamsCall(Long id, List<String> keys, Boolean keyByType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/segments/{id}/streams"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keys != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "keys", keys));
        if (keyByType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key_by_type", keyByType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "strava_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSegmentStreamsValidateBeforeCall(Long id, List<String> keys, Boolean keyByType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSegmentStreams(Async)");
        }
        
        // verify the required parameter 'keys' is set
        if (keys == null) {
            throw new ApiException("Missing the required parameter 'keys' when calling getSegmentStreams(Async)");
        }
        
        // verify the required parameter 'keyByType' is set
        if (keyByType == null) {
            throw new ApiException("Missing the required parameter 'keyByType' when calling getSegmentStreams(Async)");
        }
        

        com.squareup.okhttp.Call call = getSegmentStreamsCall(id, keys, keyByType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Segment Streams
     * Returns the given segment&#39;s streams. Requires read_all scope for private segments.
     * @param id The identifier of the segment. (required)
     * @param keys The types of streams to return. (required)
     * @param keyByType Must be true. (required)
     * @return StreamSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamSet getSegmentStreams(Long id, List<String> keys, Boolean keyByType) throws ApiException {
        ApiResponse<StreamSet> resp = getSegmentStreamsWithHttpInfo(id, keys, keyByType);
        return resp.getData();
    }

    /**
     * Get Segment Streams
     * Returns the given segment&#39;s streams. Requires read_all scope for private segments.
     * @param id The identifier of the segment. (required)
     * @param keys The types of streams to return. (required)
     * @param keyByType Must be true. (required)
     * @return ApiResponse&lt;StreamSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamSet> getSegmentStreamsWithHttpInfo(Long id, List<String> keys, Boolean keyByType) throws ApiException {
        com.squareup.okhttp.Call call = getSegmentStreamsValidateBeforeCall(id, keys, keyByType, null, null);
        Type localVarReturnType = new TypeToken<StreamSet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Segment Streams (asynchronously)
     * Returns the given segment&#39;s streams. Requires read_all scope for private segments.
     * @param id The identifier of the segment. (required)
     * @param keys The types of streams to return. (required)
     * @param keyByType Must be true. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSegmentStreamsAsync(Long id, List<String> keys, Boolean keyByType, final ApiCallback<StreamSet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSegmentStreamsValidateBeforeCall(id, keys, keyByType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamSet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
